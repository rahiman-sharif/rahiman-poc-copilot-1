<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Body and container width expansion */
        body {
            min-width: 1400px;
            margin: 0;
            padding: 0;
        }
        
        .form-container {
            max-width: none;
            width: 100%;
            min-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        /* Modern Quotation Form Styles - Purple theme */
        .quotation-form {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            padding: 4px;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
            overflow: hidden;
        }
        
        .quotation-form > * {
            background: white;
            border-radius: 12px;
            padding: 32px;
        }
        
        .invoice-header {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 32px;
            margin-bottom: 32px;
            padding: 0;
            background: transparent;
            border-radius: 0;
        }
        
        .customer-section, .quotation-info-section {
            display: flex;
            flex-direction: column;
            gap: 20px;
            background: #faf5ff;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            padding: 24px;
            transition: all 0.3s ease;
        }
        
        .customer-section:hover, .quotation-info-section:hover {
            border-color: #8b5cf6;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.15);
        }
        
        .customer-section h3, .quotation-info-section h3 {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 0 0 20px 0;
            font-size: 18px;
            font-weight: 600;
            color: #2d3748;
        }
        
        .customer-toggle {
            display: flex;
            gap: 0;
            margin-bottom: 20px;
            background: #e2e8f0;
            border-radius: 8px;
            padding: 4px;
        }
        
        .toggle-btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            background: transparent;
            color: #64748b;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 14px;
        }
        
        .toggle-btn.active {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
        
        .customer-section label, .quotation-info-section label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }
        
        .customer-section input, .customer-section select, .customer-section textarea,
        .quotation-info-section input, .quotation-info-section select, .quotation-info-section textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: white;
            margin-bottom: 16px;
            font-family: inherit;
        }
        
        .customer-section input:focus, .customer-section select:focus, .customer-section textarea:focus,
        .quotation-info-section input:focus, .quotation-info-section select:focus, .quotation-info-section textarea:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
        }

        /* Enhanced Radio Button Styling */
        .customer-type-selection {
            margin-bottom: 20px;
        }

        .radio-group {
            display: flex;
            gap: 24px;
            margin-bottom: 16px;
            background: #f8fafc;
            padding: 16px;
            border-radius: 12px;
            border: 2px solid #e2e8f0;
        }

        .radio-option {
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
            padding: 12px 16px;
            border-radius: 8px;
            transition: all 0.3s ease;
            flex: 1;
            border: 2px solid transparent;
        }

        .radio-option:hover {
            background: rgba(139, 92, 246, 0.05);
            border-color: rgba(139, 92, 246, 0.2);
        }

        .radio-option input[type="radio"] {
            width: 18px;
            height: 18px;
            margin: 0;
            accent-color: #8b5cf6;
            cursor: pointer;
        }

        .radio-label {
            font-weight: 500;
            color: #374151;
            font-size: 14px;
            cursor: pointer;
            user-select: none;
        }

        .radio-option:has(input[type="radio"]:checked) {
            background: rgba(139, 92, 246, 0.1);
            border-color: #8b5cf6;
        }

        .radio-option:has(input[type="radio"]:checked) .radio-label {
            color: #8b5cf6;
            font-weight: 600;
        }

        /* Enhanced Textarea Styling */
        .customer-section textarea, .quotation-info-section textarea {
            resize: vertical;
            min-height: 80px;
            line-height: 1.5;
        }
        
        .items-section {
            margin: 32px 0;
            background: #faf5ff;
            border-radius: 12px;
            padding: 24px;
            border: 2px solid #e2e8f0;
        }
        
        .items-section h3 {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 0 0 20px 0;
            font-size: 18px;
            font-weight: 600;
            color: #2d3748;
        }
        
        .items-table {
            width: 100%;
            min-width: 1200px;
            border-collapse: separate;
            border-spacing: 0;
            margin: 20px 0;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            table-layout: fixed;
        }
        
        .items-table th {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            letter-spacing: 0.5px;
        }
        
        .items-table th:first-child {
            border-top-left-radius: 12px;
            width: 60px;
        }
        
        .items-table th:nth-child(2) {
            width: 300px;
        }
        
        .items-table th:nth-child(3) {
            width: 100px;
        }
        
        .items-table th:nth-child(4) {
            width: 200px;
        }
        
        .items-table th:nth-child(5) {
            width: 100px;
        }
        
        .items-table th:nth-child(6) {
            width: 100px;
        }
        
        .items-table th:nth-child(7) {
            width: 150px;
        }
        
        .items-table th:last-child {
            border-top-right-radius: 12px;
            width: 80px;
        }
        
        .items-table td {
            padding: 12px;
            border-bottom: 1px solid #e5e7eb;
            background: white;
        }
        
        .items-table tbody tr:hover {
            background: #faf5ff;
        }
        
        .item-row input, .item-row select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 13px;
            transition: border-color 0.3s ease;
            box-sizing: border-box;
        }
        
        .item-row input:focus, .item-row select:focus {
            outline: none;
            border-color: #8b5cf6;
        }
        
        .add-item-btn {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .add-item-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.3);
        }
        
        .remove-item-btn {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            height: 36px;
        }
        
        .remove-item-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }
        
        .items-table td:last-child {
            text-align: center;
            vertical-align: middle;
            padding: 8px;
        }
        
        .totals-section {
            background: linear-gradient(135deg, #faf5ff, #f3e8ff);
            padding: 24px;
            border-radius: 12px;
            margin: 24px 0;
            border: 2px solid #8b5cf6;
        }
        
        .totals-grid {
            display: grid;
            grid-template-columns: 1fr 200px;
            gap: 12px;
            align-items: center;
        }
        
        .total-row {
            display: contents;
        }
        
        .total-label {
            text-align: right;
            font-weight: 600;
            color: #374151;
        }
        
        .total-amount {
            text-align: right;
            padding: 12px;
            background: white;
            border-radius: 8px;
            border: 2px solid #e5e7eb;
            font-weight: 600;
        }
        
        .final-total .total-amount {
            font-size: 20px;
            font-weight: bold;
            color: #8b5cf6;
            border-color: #8b5cf6;
            background: linear-gradient(135deg, #faf5ff, #f3e8ff);
        }
        
        .charges-section {
            margin: 24px 0;
            padding: 24px;
            background: linear-gradient(135deg, #fef3c7, #fde68a);
            border-radius: 12px;
            border: 2px solid #f59e0b;
        }
        
        .charges-section h3 {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 0 0 20px 0;
            font-size: 16px;
            font-weight: 600;
            color: #92400e;
        }
        
        .charge-row {
            display: grid;
            grid-template-columns: 2fr 2fr 1fr 1fr 50px;
            gap: 12px;
            align-items: center;
            margin-bottom: 12px;
            padding: 16px;
            background: white;
            border-radius: 8px;
            border: 1px solid #f59e0b;
            transition: all 0.3s ease;
        }
        
        .charge-row:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(245, 158, 11, 0.2);
        }
        
        .form-actions {
            display: flex;
            gap: 16px;
            justify-content: flex-end;
            margin-top: 32px;
            padding-top: 24px;
            border-top: 2px solid #e5e7eb;
        }
        
        .btn {
            padding: 14px 28px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            border: none;
        }
        
        .btn-secondary {
            background: #6b7280;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #4b5563;
            transform: translateY(-2px);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(139, 92, 246, 0.4);
        }
        
        /* Modern GST Checkbox Styles */
        .gst-checkbox-container {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 20px 0;
            padding: 16px;
            background: linear-gradient(135deg, #faf5ff, #f3e8ff);
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .gst-checkbox-container:hover {
            border-color: #8b5cf6;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.1);
            background: linear-gradient(135deg, #f3e8ff, #ede9fe);
        }
        
        .gst-checkbox-container.checked {
            border-color: #10b981;
            background: linear-gradient(135deg, #ecfdf5, #d1fae5);
        }
        
        .gst-checkbox {
            width: 24px;
            height: 24px;
            border: 2px solid #d1d5db;
            border-radius: 6px;
            background: white;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .gst-checkbox input[type="checkbox"] {
            opacity: 0;
            width: 100%;
            height: 100%;
            margin: 0;
            cursor: pointer;
            position: absolute;
        }
        
        .gst-checkbox::after {
            content: '✓';
            color: white;
            font-weight: bold;
            font-size: 16px;
            transform: scale(0);
            transition: all 0.2s ease;
        }
        
        .gst-checkbox input:checked ~ .gst-checkbox,
        .gst-checkbox:has(input:checked) {
            background: #10b981;
            border-color: #10b981;
        }
        
        .gst-checkbox input:checked ~ .gst-checkbox::after,
        .gst-checkbox:has(input:checked)::after {
            transform: scale(1);
        }
        
        .gst-checkbox-label {
            font-weight: 600;
            color: #374151;
            font-size: 16px;
            cursor: pointer;
        }
        
        .gst-status-text {
            margin-left: auto;
            font-size: 14px;
            font-weight: 500;
            padding: 4px 12px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }
        
        .gst-status-text.disabled {
            background: #fee2e2;
            color: #dc2626;
        }
        
        .gst-status-text.enabled {
            background: #dcfce7;
            color: #16a34a;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="main-header">
        <div class="header-content">
            <div class="logo-section">
                <a href="/dashboard" style="text-decoration: none; color: inherit;">
                    <h1>🏢 <%= companyName %></h1>
                    <p>New Quotation</p>
                </a>
            </div>
            
            <div class="user-section">
                <div class="user-info">
                    <span class="user-name">Welcome, <%= user.name %></span>
                    <span class="user-role">(<%= user.role %>)</span>
                </div>
                <form action="/logout" method="POST" style="display: inline;">
                    <button type="submit" class="logout-btn">Logout</button>
                </form>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="breadcrumb">
        <div class="breadcrumb-content">
            <a href="/dashboard">🏠 Dashboard</a>
            <span class="separator">></span>
            <a href="/quotations">💜 Quotations</a>
            <span class="separator">></span>
            <span class="current">💜➕ New Quotation</span>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="form-main">
        <div class="form-container">
            <!-- Page Header -->
            <div class="page-header">
                <div class="header-left">
                    <h2>💜 Create New Quotation</h2>
                    <p>Generate price quote for customer inquiry</p>
                </div>
                <div class="header-right">
                    <a href="/quotations" class="btn btn-secondary">
                        <span class="btn-icon">←</span>
                        Back to Quotations
                    </a>
                </div>
            </div>

            <!-- Alert Messages -->
            <% if (typeof query !== 'undefined' && query.error) { %>
                <div class="alert alert-error">
                    <%= query.error %>
                </div>
            <% } %>

            <!-- Quotation Form -->
            <form method="POST" action="/quotations" class="quotation-form" id="quotationForm">
                <!-- Header -->
                <div class="invoice-header">
                    <!-- Customer Section -->
                    <div class="customer-section">
                        <h3>👤 Customer Information</h3>
                        
                        <!-- Customer Selection Type -->
                        <div class="customer-type-selection" style="margin-bottom: 20px;">
                            <div class="radio-group" style="display: flex; gap: 20px; margin-bottom: 16px;">
                                <label class="radio-option" style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="radio" name="customerType" value="existing" id="existingCustomer" style="margin: 0;">
                                    <span class="radio-label">🔍 Select Existing Customer</span>
                                </label>
                                <label class="radio-option" style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                    <input type="radio" name="customerType" value="new" id="newCustomer" checked style="margin: 0;">
                                    <span class="radio-label">➕ Add New Customer</span>
                                </label>
                            </div>
                        </div>

                        <!-- Existing Customer Selection -->
                        <div id="existingCustomerForm" class="customer-form" style="display: none;">
                            <div style="margin-bottom: 16px;">
                                <label for="existingCustomerId">Select Customer *</label>
                                <select id="existingCustomerId" name="existingCustomerId" style="width: 100%; padding: 12px; border: 2px solid #e5e7eb; border-radius: 8px;">
                                    <option value="">Choose existing customer...</option>
                                    <% customers.forEach(customer => { %>
                                        <option value="<%= customer.id %>" 
                                                data-name="<%= customer.name %>"
                                                data-phone="<%= customer.contact.phone %>"
                                                data-email="<%= customer.contact.email || '' %>"
                                                data-gstin="<%= customer.gst.gstin || '' %>"
                                                data-address="<%= [customer.contact.address.line1, customer.contact.address.line2, customer.contact.address.city].filter(Boolean).join(', ') %>">
                                            <%= customer.name %> - <%= customer.contact.phone %>
                                        </option>
                                    <% }) %>
                                </select>
                            </div>
                            
                            <!-- Customer Preview Card -->
                            <div id="customerPreview" class="customer-preview" style="display: none; background: #faf5ff; border: 2px solid #8b5cf6; border-radius: 8px; padding: 16px; margin-top: 16px;">
                                <div class="preview-header" style="margin-bottom: 12px;">
                                    <h4 style="margin: 0; color: #8b5cf6;">👤 Selected Customer</h4>
                                </div>
                                <div class="preview-content" style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px;">
                                    <div class="preview-row">
                                        <span style="font-weight: 600; color: #374151;">Name:</span>
                                        <span id="previewName" style="color: #6b7280;">-</span>
                                    </div>
                                    <div class="preview-row">
                                        <span style="font-weight: 600; color: #374151;">Phone:</span>
                                        <span id="previewPhone" style="color: #6b7280;">-</span>
                                    </div>
                                    <div class="preview-row">
                                        <span style="font-weight: 600; color: #374151;">Email:</span>
                                        <span id="previewEmail" style="color: #6b7280;">-</span>
                                    </div>
                                    <div class="preview-row">
                                        <span style="font-weight: 600; color: #374151;">GST:</span>
                                        <span id="previewGstin" style="color: #6b7280;">-</span>
                                    </div>
                                    <div class="preview-row" style="grid-column: 1 / -1;">
                                        <span style="font-weight: 600; color: #374151;">Address:</span>
                                        <span id="previewAddress" style="color: #6b7280;">-</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- New Customer Form -->
                        <div id="newCustomerForm" class="customer-form">
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                                <div>
                                    <label for="customerName">Customer Name *</label>
                                    <input type="text" name="customerName" id="customerName" required placeholder="Enter customer name">
                                </div>
                                <div>
                                    <label for="customerPhone">Phone Number *</label>
                                    <input type="tel" name="customerPhone" id="customerPhone" required placeholder="Enter phone number">
                                </div>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                                <div>
                                    <label for="customerEmail">Email (Optional)</label>
                                    <input type="email" name="customerEmail" id="customerEmail" placeholder="Enter email address">
                                </div>
                                <div>
                                    <label for="customerGstin">GST Number (Optional)</label>
                                    <input type="text" name="customerGstin" id="customerGstin" placeholder="Enter GST number">
                                </div>
                            </div>
                            
                            <div>
                                <label for="customerAddress">Address (Optional)</label>
                                <textarea name="customerAddress" id="customerAddress" rows="3" placeholder="Enter complete address"></textarea>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Quotation Information -->
                    <div class="quotation-info-section">
                        <h3>💜 Quotation Information</h3>
                        
                        <!-- GST Checkbox Section -->
                        <div class="gst-checkbox-container" title="Enable GST for this quotation" onclick="toggleGSTCheckbox()">
                            <div class="gst-checkbox">
                                <input type="checkbox" id="gstEnabled" name="gstEnabled" onchange="handleGSTChange()">
                            </div>
                            <label class="gst-checkbox-label" for="gstEnabled">Enable GST Quotation</label>
                            <span class="gst-status-text disabled" id="gstStatusText">Disabled</span>
                        </div>
                        
                        <div>
                            <label>Quotation Number</label>
                            <input type="text" id="quotationNumberDisplay" value="QT-<%= String(nextQuotationNumber).padStart(4, '0') %>" readonly style="background: #faf5ff;">
                        </div>
                        <div>
                            <label>Date</label>
                            <input type="date" name="quotationDate" value="<%= new Date().toISOString().split('T')[0] %>" required>
                        </div>
                        <div>
                            <label>Valid For (Days)</label>
                            <select name="validityDays">
                                <option value="15">15 Days</option>
                                <option value="30" selected>30 Days</option>
                                <option value="45">45 Days</option>
                                <option value="60">60 Days</option>
                                <option value="90">90 Days</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Items Section -->
                <div class="items-section">
                    <h3>📦 Items</h3>
                    <table class="items-table" id="itemsTable">
                        <thead>
                            <tr>
                                <th>S.No</th>
                                <th>Material</th>
                                <th>HSN</th>
                                <th>Bundle/Weight Information</th>
                                <th>Quantity/Weight</th>
                                <th>Rate</th>
                                <th>Total Amount</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody">
                            <!-- Items will be added dynamically -->
                        </tbody>
                    </table>
                    
                    <button type="button" class="add-item-btn" onclick="addItemRow()">
                        ➕ Add Item
                    </button>
                </div>

                <!-- Extra Charges Section -->
                <div class="charges-section">
                    <h3>🚛 Additional Charges</h3>
                    <div id="chargesContainer">
                        <!-- Charges will be added dynamically -->
                    </div>
                    <button type="button" class="add-item-btn" onclick="addChargeRow()">
                        ➕ Add Charge
                    </button>
                </div>

                <!-- Totals Section -->
                <div class="totals-section">
                    <div class="totals-grid">
                        <div class="total-row">
                            <div class="total-label">Subtotal:</div>
                            <div class="total-amount" id="subtotalAmount">₹0.00</div>
                        </div>
                        <div class="total-row">
                            <div class="total-label">CGST:</div>
                            <div class="total-amount" id="cgstAmount">₹0.00</div>
                        </div>
                        <div class="total-row">
                            <div class="total-label">SGST:</div>
                            <div class="total-amount" id="sgstAmount">₹0.00</div>
                        </div>
                        <div class="total-row">
                            <div class="total-label final-total">Total:</div>
                            <div class="total-amount final-total" id="finalTotal">₹0.00</div>
                        </div>
                    </div>
                </div>

                <!-- Hidden Fields for Form Submission -->
                <input type="hidden" name="quotationItems" id="quotationItems">
                <input type="hidden" name="extraCharges" id="extraCharges">
                <input type="hidden" name="subtotal" id="subtotalValue">
                <input type="hidden" name="cgstAmount" id="cgstValue">
                <input type="hidden" name="sgstAmount" id="sgstValue">
                <input type="hidden" name="finalTotal" id="finalTotalValue">
                <input type="hidden" name="gstEnabledValue" id="gstEnabledValue" value="false">

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" onclick="window.location.href='/quotations'" class="btn btn-secondary">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <span class="btn-icon">💾</span>
                        Save Quotation
                    </button>
                </div>
            </form>
        </div>
    </main>

    <!-- JavaScript -->
    <script>
        // GST Toggle Handler
        function handleGSTToggle() {
            const gstToggle = document.getElementById('gstToggle');
            const isGSTEnabled = gstToggle.checked;
            
            // Update quotation number based on GST status
            // Note: This will be handled on the server side
            console.log('GST Status:', isGSTEnabled ? 'ENABLED' : 'DISABLED');
            
            // Show/hide GST-related fields if needed
            // Add any UI changes based on GST status here
            if (isGSTEnabled) {
                console.log('GST quotation enabled - will use GST quotation number format');
            } else {
                console.log('Regular quotation - will use standard quotation number format');
            }
        }
        
        // Available items data
        let availableItems = <%- JSON.stringify(items) %>;
        
        // Quotation number templates
        const normalQuotationNumber = 'QT-<%= String(nextQuotationNumber).padStart(4, "0") %>';
        const gstQuotationNumber = 'GST-QT-<%= String(nextGSTQuotationNumber).padStart(4, "0") %>';
        
        let itemCounter = 1;
        let chargeCounter = 1;

        // GST Checkbox Handler
        function handleGSTChange() {
            const gstCheckbox = document.getElementById('gstEnabled');
            const container = document.querySelector('.gst-checkbox-container');
            const statusText = document.getElementById('gstStatusText');
            const hiddenField = document.getElementById('gstEnabledValue');
            const quotationNumberDisplay = document.getElementById('quotationNumberDisplay');
            
            if (gstCheckbox.checked) {
                container.classList.add('checked');
                statusText.textContent = 'Enabled';
                statusText.className = 'gst-status-text enabled';
                hiddenField.value = 'true';
                quotationNumberDisplay.value = gstQuotationNumber;
                console.log('GST quotation enabled - GST will be calculated');
            } else {
                container.classList.remove('checked');
                statusText.textContent = 'Disabled';
                statusText.className = 'gst-status-text disabled';
                hiddenField.value = 'false';
                quotationNumberDisplay.value = normalQuotationNumber;
                console.log('Regular quotation - GST will be 0');
            }
            
            // Recalculate totals immediately when GST status changes
            calculateGrandTotal();
        }
        
        function toggleGSTCheckbox() {
            const gstCheckbox = document.getElementById('gstEnabled');
            gstCheckbox.checked = !gstCheckbox.checked;
            handleGSTChange();
        }

        // Add item row (NO STOCK VALIDATION - this is quotation!)
        function addItemRow() {
            const tbody = document.getElementById('itemsTableBody');
            const row = document.createElement('tr');
            row.className = 'item-row';
            row.innerHTML = `
                <td>${itemCounter}</td>
                <td>
                    <select onchange="selectItem(this)">
                        <option value="">Select Item</option>
                        ${availableItems.filter(item => !item.isServiceItem).map(item => {
                            // Generate meaningful bundle info - use bundleInfo if available, otherwise show stock info
                            const bundleDisplay = item.bundleInfo || 
                                (!item.isServiceItem ? `Stock: ${item.stock.quantity} ${item.unit}` : '');
                            return `<option value="${item.id}" 
                                     data-name="${item.name}" 
                                     data-price="${item.price}" 
                                     data-unit="${item.unit}" 
                                     data-hsn="${item.hsnCode}" 
                                     data-gst="${item.gstRate}"
                                     data-bundle="${bundleDisplay}">
                                ${item.name} (${item.unit})
                            </option>`;
                        }).join('')}
                    </select>
                </td>
                <td><input type="text" readonly></td>
                <td><input type="text" readonly placeholder="Bundle info"></td>
                <td><input type="number" step="0.01" min="0" placeholder="0" onchange="calculateRowTotal(this)"></td>
                <td><input type="number" step="0.01" min="0" placeholder="0" onchange="calculateRowTotal(this)"></td>
                <td><input type="text" readonly class="row-total">₹0.00</td>
                <td><button type="button" class="remove-item-btn" onclick="removeItemRow(this)">❌</button></td>
            `;
            tbody.appendChild(row);
            itemCounter++;
        }

        // Select item handler (NO STOCK RESTRICTIONS!)
        function selectItem(select) {
            const option = select.options[select.selectedIndex];
            const row = select.closest('tr');
            
            if (option.value) {
                // Fill HSN code
                row.cells[2].querySelector('input').value = option.dataset.hsn;
                // Fill Size/Weight (Bundle info)
                row.cells[3].querySelector('input').value = option.dataset.bundle || '';
                // Set default price
                row.cells[5].querySelector('input').value = option.dataset.price;
                
                // Calculate total
                calculateRowTotal(row.cells[4].querySelector('input'));
            } else {
                // Clear fields
                row.cells[2].querySelector('input').value = '';
                row.cells[3].querySelector('input').value = '';
                row.cells[5].querySelector('input').value = '';
                row.cells[6].querySelector('input').value = '₹0.00';
            }
        }

        // Calculate row total (NO STOCK VALIDATION!)
        function calculateRowTotal(input) {
            const row = input.closest('tr');
            const quantity = parseFloat(row.cells[4].querySelector('input').value) || 0;
            const rate = parseFloat(row.cells[5].querySelector('input').value) || 0;
            
            const total = quantity * rate;
            row.cells[6].querySelector('input').value = `₹${total.toFixed(2)}`;
            calculateGrandTotal();
        }

        // Remove item row
        function removeItemRow(button) {
            button.closest('tr').remove();
            calculateGrandTotal();
        }

        // Add charge row
        function addChargeRow() {
            const container = document.getElementById('chargesContainer');
            const row = document.createElement('div');
            row.className = 'charge-row';
            row.innerHTML = `
                <select onchange="selectCharge(this)">
                    <option value="">Select Service/Charge</option>
                    ${availableItems.filter(item => item.isServiceItem).map(item => 
                        `<option value="${item.id}" 
                                 data-name="${item.name}" 
                                 data-price="${item.price}">
                            ${item.name}
                        </option>`
                    ).join('')}
                    <option value="custom">Custom Charge</option>
                </select>
                <input type="text" placeholder="Description" required>
                <input type="number" step="0.01" min="0" placeholder="Amount" onchange="calculateGrandTotal()" required>
                <select onchange="calculateGrandTotal()">
                    <option value="0">No GST</option>
                    <option value="5">5% GST</option>
                    <option value="12">12% GST</option>
                    <option value="18">18% GST</option>
                </select>
                <button type="button" class="remove-item-btn" onclick="removeChargeRow(this)">❌</button>
            `;
            container.appendChild(row);
            chargeCounter++;
        }

        // Select charge handler
        function selectCharge(select) {
            const option = select.options[select.selectedIndex];
            const row = select.closest('.charge-row');
            const descInput = row.querySelector('input[type="text"]');
            const amountInput = row.querySelector('input[type="number"]');
            
            if (option.value && option.value !== 'custom') {
                descInput.value = option.dataset.name;
                amountInput.value = option.dataset.price;
                calculateGrandTotal();
            } else if (option.value === 'custom') {
                descInput.value = '';
                amountInput.value = '';
            } else {
                descInput.value = '';
                amountInput.value = '';
            }
        }

        // Remove charge row
        function removeChargeRow(button) {
            button.closest('.charge-row').remove();
            calculateGrandTotal();
        }

        // Calculate grand total
        function calculateGrandTotal() {
            let subtotal = 0;
            let totalCgst = 0;
            let totalSgst = 0;

            // Check if GST is enabled
            const gstEnabled = document.getElementById('gstEnabled').checked;

            // Calculate items total
            document.querySelectorAll('.item-row').forEach(row => {
                const select = row.cells[1].querySelector('select');
                const option = select.options[select.selectedIndex];
                const quantity = parseFloat(row.cells[4].querySelector('input').value) || 0;
                const rate = parseFloat(row.cells[5].querySelector('input').value) || 0;
                const amount = quantity * rate;
                
                subtotal += amount;
                
                if (option.value && amount > 0 && gstEnabled) {
                    const gstRate = parseFloat(option.dataset.gst) || 0;
                    const gstAmount = (amount * gstRate) / 100;
                    totalCgst += gstAmount / 2;
                    totalSgst += gstAmount / 2;
                }
            });

            // Calculate charges total
            document.querySelectorAll('.charge-row').forEach(row => {
                const amountInput = row.querySelector('input[type="number"]');
                const gstSelect = row.querySelectorAll('select')[1];
                
                const amount = parseFloat(amountInput?.value) || 0;
                const gstRate = parseFloat(gstSelect?.value) || 0;
                
                subtotal += amount;
                
                if (amount > 0 && gstRate > 0 && gstEnabled) {
                    const gstAmount = (amount * gstRate) / 100;
                    totalCgst += gstAmount / 2;
                    totalSgst += gstAmount / 2;
                }
            });

            const finalTotal = subtotal + totalCgst + totalSgst;

            // Update display
            document.getElementById('subtotalAmount').textContent = `₹${subtotal.toFixed(2)}`;
            document.getElementById('cgstAmount').textContent = `₹${totalCgst.toFixed(2)}`;
            document.getElementById('sgstAmount').textContent = `₹${totalSgst.toFixed(2)}`;
            document.getElementById('finalTotal').textContent = `₹${finalTotal.toFixed(2)}`;

            // Update hidden fields
            document.getElementById('subtotalValue').value = subtotal.toFixed(2);
            document.getElementById('cgstValue').value = totalCgst.toFixed(2);
            document.getElementById('sgstValue').value = totalSgst.toFixed(2);
            document.getElementById('finalTotalValue').value = finalTotal.toFixed(2);
        }

        // Form submission
        document.getElementById('quotationForm').addEventListener('submit', function(e) {
            // Collect items data
            const items = [];
            document.querySelectorAll('.item-row').forEach(row => {
                const select = row.cells[1].querySelector('select');
                const option = select.options[select.selectedIndex];
                
                if (option.value) {
                    const quantity = parseFloat(row.cells[4].querySelector('input').value) || 0;
                    const rate = parseFloat(row.cells[5].querySelector('input').value) || 0;
                    
                    if (quantity > 0 && rate > 0) {
                        items.push({
                            itemId: option.value,
                            itemName: option.dataset.name,
                            hsnCode: option.dataset.hsn,
                            quantity: quantity,
                            rate: rate,
                            amount: quantity * rate,
                            gstRate: parseFloat(option.dataset.gst) || 0
                        });
                    }
                }
            });

            // Collect charges data
            const charges = [];
            document.querySelectorAll('.charge-row').forEach(row => {
                const descInput = row.children[1];
                const amountInput = row.children[2];
                const gstSelect = row.children[3];
                
                const description = descInput.value.trim();
                const amount = parseFloat(amountInput.value) || 0;
                const gstRate = parseFloat(gstSelect.value) || 0;
                
                if (description && amount > 0) {
                    charges.push({
                        description: description,
                        amount: amount,
                        gstRate: gstRate
                    });
                }
            });

            // Customer validation based on selected type
            const customerType = document.querySelector('input[name="customerType"]:checked').value;
            
            if (customerType === 'existing') {
                // Validate existing customer selection
                const existingCustomerId = document.getElementById('existingCustomerId').value;
                if (!existingCustomerId) {
                    e.preventDefault();
                    alert('❌ Please select an existing customer.');
                    return;
                }
            } else {
                // Validate new customer input
                if (!document.getElementById('customerName').value.trim()) {
                    e.preventDefault();
                    alert('❌ Please enter customer name.');
                    return;
                }
                
                if (!document.getElementById('customerPhone').value.trim()) {
                    e.preventDefault();
                    alert('❌ Please enter customer phone number.');
                    return;
                }
            }
            
            if (items.length === 0) {
                e.preventDefault();
                alert('❌ Please add at least one item to the quotation.');
                return;
            }

            const finalTotalValue = parseFloat(document.getElementById('finalTotalValue').value) || 0;
            if (finalTotalValue <= 0) {
                e.preventDefault();
                alert('❌ Quotation total must be greater than ₹0.');
                return;
            }

            // Set hidden fields
            document.getElementById('quotationItems').value = JSON.stringify(items);
            document.getElementById('extraCharges').value = JSON.stringify(charges);
        });

        // Customer Type Selection Functionality
        function initializeCustomerSelection() {
            const existingRadio = document.getElementById('existingCustomer');
            const newRadio = document.getElementById('newCustomer');
            const existingForm = document.getElementById('existingCustomerForm');
            const newForm = document.getElementById('newCustomerForm');
            const customerSelect = document.getElementById('existingCustomerId');
            const customerPreview = document.getElementById('customerPreview');
            
            // Toggle between existing and new customer forms
            function toggleCustomerForm() {
                if (existingRadio.checked) {
                    existingForm.style.display = 'block';
                    newForm.style.display = 'none';
                    // Clear new customer form
                    newForm.querySelectorAll('input, textarea').forEach(input => {
                        input.value = '';
                        input.removeAttribute('required');
                    });
                    // Make existing customer select required
                    customerSelect.setAttribute('required', 'required');
                } else {
                    existingForm.style.display = 'none';
                    newForm.style.display = 'block';
                    customerPreview.style.display = 'none';
                    // Clear existing customer selection
                    customerSelect.value = '';
                    customerSelect.removeAttribute('required');
                    // Make new customer fields required
                    document.getElementById('customerName').setAttribute('required', 'required');
                    document.getElementById('customerPhone').setAttribute('required', 'required');
                }
            }
            
            // Handle existing customer selection
            function handleCustomerSelection() {
                const selectedOption = customerSelect.options[customerSelect.selectedIndex];
                if (selectedOption.value) {
                    // Show customer preview
                    document.getElementById('previewName').textContent = selectedOption.dataset.name || '-';
                    document.getElementById('previewPhone').textContent = selectedOption.dataset.phone || '-';
                    document.getElementById('previewEmail').textContent = selectedOption.dataset.email || '-';
                    document.getElementById('previewGstin').textContent = selectedOption.dataset.gstin || '-';
                    document.getElementById('previewAddress').textContent = selectedOption.dataset.address || '-';
                    customerPreview.style.display = 'block';
                } else {
                    customerPreview.style.display = 'none';
                }
            }
            
            // Event listeners
            existingRadio.addEventListener('change', toggleCustomerForm);
            newRadio.addEventListener('change', toggleCustomerForm);
            customerSelect.addEventListener('change', handleCustomerSelection);
            
            // Initialize
            toggleCustomerForm();
        }

        // Initialize customer selection on page load
        document.addEventListener('DOMContentLoaded', initializeCustomerSelection);

        // Initialize with one item row
        addItemRow();
    </script>
</body>
</html>
